<link rel="stylesheet" href="/styles/PostTemplate.css">

<div class="body-container">
    <div class="left-block">
        <h1>Find Your Community!</h1>
        <div class="community-list">
            <a href="/posts/Gaming">🎮 Gaming</a>
            <a href="/posts/Food">🍔 Food</a>
            <a href="/posts/Coffee">☕ Coffee</a>
            <a href="/posts/Baking">🍰 Baking</a>
            <a href="/posts/Travel">✈️ Travel</a>
            <a href="/posts/Technology">💻 Technology</a>
        </div>
    </div>

    <div class="middle-block">
        <div class="post-feed">
            <h2>Recent Posts</h2>
            {{#each posts}}
                {{> post this userProfile=../userProfile}}
            {{/each}}
        </div>
    </div>
</div>

<!-- Create Post Modal -->
<div id="create-post-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Create a Post</h2>
            <span class="close" onclick="closeCreatePostModal()">&times;</span>
        </div>

        <div class="modal-body">
            <div class="modal-profile">
                <img src="{{userProfile.profilePic}}" alt="Profile Picture" class="profile-picture">
                <span>{{userProfile.username}}</span>
            </div>
            <textarea id="post-caption" placeholder="What's on your mind?"></textarea>

            <!-- Post Tag Dropdown -->
            <select id="post-tag" required style="width: 100%; padding: 10px; margin: 10px 0; background: #3a3b3c; border: none; color: white; border-radius: 5px;">
                <option value="">-- Select Category --</option>
                <option value="Food">🍔 Food</option>
                <option value="Coffee">☕ Coffee</option>
                <option value="Baking">🍰 Baking</option>
                <option value="Travel">✈️ Travel</option>
                <option value="Gaming">🎮 Gaming</option>
                <option value="Technology">💻 Technology</option>
                <option value="Sports">⚽ Sports</option>
                <option value="Music">🎵 Music</option>
                <option value="Art">🎨 Art</option>
                <option value="General">💬 General</option>
            </select>
            
            <!-- Emoji Picker -->
            <div class="emoji-picker">
                <span onclick="addEmoji('😀')">😀</span>
                <span onclick="addEmoji('❤️')">❤️</span>
                <span onclick="addEmoji('😂')">😂</span>
                <span onclick="addEmoji('😢')">😢</span>
                <span onclick="addEmoji('😡')">😡</span>
            </div>

            <!-- Image Upload -->
            <label for="post-image" class="custom-upload-btn">📷 Upload Image</label>
            <input type="file" id="post-image" accept="image/*" onchange="previewImage(event)" style="display: none;">

            <!-- Image Preview -->
            <div id="image-preview-container" style="display: none; max-height: 250px; overflow-y: auto;">
                <img id="preview-image" src="" alt="Image Preview" style="max-width: 100%; display: block;">
            </div>
            
            <!-- Post Button -->
            <button class="post-btn" id="submit-post-btn">Post</button>
        </div>
    </div>
</div>

<!-- Loading Overlay (Facebook-style) -->
<div id="posting-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 10000; justify-content: center; align-items: center;">
    <div style="background: #242526; padding: 30px; border-radius: 10px; text-align: center;">
        <div class="spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #667eea; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin: 0 auto 15px;"></div>
        <p style="color: white; font-size: 18px; margin: 0;">Posting...</p>
    </div>
</div>

<style>
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

<script>
    // Modal handling
    function openCreatePostModal() {
        document.getElementById('create-post-modal').style.display = 'flex';
    }

    function closeCreatePostModal() {
        document.getElementById('create-post-modal').style.display = 'none';
        document.getElementById('post-caption').value = '';
        document.getElementById('post-tag').value = '';
        document.getElementById('post-image').value = '';
        document.getElementById('image-preview-container').style.display = 'none';
    }

    // Open modal when create button is clicked
    document.addEventListener("DOMContentLoaded", function () {
        const createPostBtn = document.getElementById("create-post-btn");
        const modal = document.getElementById("create-post-modal");

        if (createPostBtn) {
            createPostBtn.addEventListener("click", function (e) {
                e.preventDefault();
                openCreatePostModal();
            });
        }

        // Close modal when clicking outside
        window.addEventListener("click", function (event) {
            if (event.target === modal) {
                closeCreatePostModal();
            }
        });
    });

    // Emoji picker
    function addEmoji(emoji) {
        const textarea = document.getElementById('post-caption');
        textarea.value += emoji;
    }

    // Image preview
    function previewImage(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewContainer = document.getElementById("image-preview-container");
                const previewImage = document.getElementById("preview-image");
                previewImage.src = e.target.result;
                previewContainer.style.display = "block";
            };
            reader.readAsDataURL(file);
        }
    }

    // Submit post - with double-submit prevention and loading indicator
    const submitBtn = document.getElementById("submit-post-btn");
    if (submitBtn) {
        submitBtn.addEventListener("click", async function (e) {
            // Prevent double submission
            if (submitBtn.disabled) return;

            const caption = document.getElementById("post-caption").value.trim();
            const postTag = document.getElementById("post-tag").value.trim();
            const imageInput = document.getElementById("post-image").files[0];

            // Silent validation - just return if invalid
            if (!caption && !imageInput) return;
            if (!postTag) return;

            // Disable button and show loading
            submitBtn.disabled = true;
            closeCreatePostModal();
            document.getElementById('posting-overlay').style.display = 'flex';

            const formData = new FormData();
            formData.append("caption", caption);
            formData.append("postTag", postTag);
            if (imageInput) {
                formData.append("image", imageInput);
            }

            try {
                const response = await fetch("/create-post", {
                    method: "POST",
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    // Silent success - just reload
                    location.reload();
                } else {
                    // Hide loading and re-enable button on error
                    document.getElementById('posting-overlay').style.display = 'none';
                    submitBtn.disabled = false;
                }
            } catch (error) {
                console.error("Error creating post:", error);
                document.getElementById('posting-overlay').style.display = 'none';
                submitBtn.disabled = false;
            }
        });
    }

    // Toggle comments
    function toggleComments(postId) {
        const commentSection = document.getElementById(`comments-${postId}`);
        if (commentSection) {
            commentSection.style.display = 
                (commentSection.style.display === "none" || commentSection.style.display === "") 
                ? "block" : "none";
        }
    }

    // Toggle comment options
    function toggleCommentOptions(commentId) {
        const allMenus = document.querySelectorAll(".comment-options-menu");
        allMenus.forEach(menu => {
            if (menu.id !== `comment-options-${commentId}`) {
                menu.style.display = "none";
            }
        });

        const menu = document.getElementById(`comment-options-${commentId}`);
        if (menu) {
            menu.style.display = (menu.style.display === "none" || menu.style.display === "") 
                ? "block" : "none";
        }
    }

    // Edit comment modal
    function openEditCommentModal(commentId) {
        const modal = document.getElementById(`edit-comment-modal-${commentId}`);
        if (modal) {
            modal.style.display = "flex";
        }
    }

    function closeEditCommentModal(commentId) {
        const modal = document.getElementById(`edit-comment-modal-${commentId}`);
        if (modal) {
            modal.style.display = "none";
        }
    }

    async function saveEditedComment(commentId) {
        const textarea = document.getElementById(`edit-comment-input-${commentId}`);
        const newContent = textarea.value.trim();

        if (!newContent) return;

        const commentElement = document.getElementById(`comment-${commentId}`);
        const postElement = commentElement.closest(".comments-section");
        const postId = postElement?.id?.replace("comments-", "");

        if (!postId) return;

        try {
            const response = await fetch(`/edit-comment/${postId}/${commentId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ updatedContent: newContent })
            });

            const result = await response.json();

            if (result.success) {
                const commentText = document.getElementById(`comment-text-${commentId}`);
                if (commentText) {
                    commentText.textContent = result.updatedComment;
                }
                closeEditCommentModal(commentId);
            }
        } catch (err) {
            console.error("Error editing comment:", err);
        }
    }

    // Reply section
    function toggleReplySection(commentId) {
        const replySection = document.getElementById(`reply-section-${commentId}`);
        if (replySection) {
            replySection.style.display = 
                (replySection.style.display === "none" || replySection.style.display === "") 
                ? "block" : "none";
        }
    }

    function cancelReply(commentId) {
        document.getElementById(`reply-input-${commentId}`).value = "";
        toggleReplySection(commentId);
    }

    function reportComment(commentId) {
        // Silent - could implement later
    }

    // Post options
    function togglePostOptions(postId) {
        const menu = document.getElementById(`options-menu-${postId}`);
        if (menu) {
            menu.style.display = (menu.style.display === "none" || menu.style.display === "") 
                ? "block" : "none";
        }
    }

    function reportPost(postId) {
        // Silent - could implement later
    }
</script>